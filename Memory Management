Info about Memory Management:
https://www.youtube.com/watch?v=ifmW3lOA6CA (Qualcomm Vulkan Tutorial 7: Vulkan Memory Management)

Buffer Types:
  Pool Memory 
  Host Memory
  Device Memory
  
What kind of objects allocted in Pool Memory:
  Command Buffers - VkCommandPool
  Descriptor Sets - VkDescriptorPool
  Queries - VkQueryPool
 
Memory pools can only handle fixed sized memory allocations and avoids problems like memory fragmentation that happens with
variable size of allocations. They are single threaded memory allocators and they are not thread safe so you need 
to allocate one pool per thread. Vulkan keeps track of pool allocations and has ability to do bulk reset returning all allocations back
to the pool.

How to create and destroy pools:
  Command Buffers - VkCreateCommandPool/VkDestroyCommandPool
  Descriptor Sets - VkCreateDescriptorPool/VkDestroyDescriptorPool
  Queries - VkCreateQueryPool/VkDestroyQueryPool

What command pools are used for:
  Command pools are used for to help track of command buffers.
  There are several flags used when creating command pool:
    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT - command buffers from the pool be short-lived perhaps for a single frame or single que submission
    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT - command buffers from the pool can be individually reset. When the reset command
    buffer bit is set you can reset individual command buffers with VkResetCommandBuffer. Command buffers also implicitly reset by calling
    VkBeginCommandBuffer. Also, you can bulk reset by calling VkResetCommandPool.
    Make sure you actually done doing with that command buffer before resetting
    
 Descriptor Pool:
  There are several flags used when creating descriptor pool:
    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT - allows descriptor allocations to return to the pool individually
    Allocate individual sets: VkAllocateDescriptorSets
    Free individual sets: VkFreeDescriptorSets
    Reseting pool: VkResetDescriptorPool
    
 Queries:
  Queries are very small in memory and homogeneous. Often just a 64-bit integer per query. It does not make sense
  to manage them individually. So Vulkan API allows them to be allocated in pools in contiguous allocations. When
  creating queries there aren't any creation flags like for other pools. You just need to specify which
  query type pool is going to allocate.
  Query types: Occlusion, Pipeline Statistics, Timestamp
  Begin using: VkCmdBeginQuery
  End using: VkCmdEndQuery
  Resetting : VkCmdResetQueryPool
  
  Host Memory (Memory that's on your computer and not on the GPU):
    VkAllocationCallbacks
    Hierarchy: Instance, Device, Pipeline Cache, Object
    
  Device Memory (GPU Memory):
    Used to allocate Images and buffers.
    Allocate Memory: VkAllocateMemory
    To bind the memory to vulkan resource: VkBindImageMemory/ VkBindBufferMemory
    To free memory: VkFreeMemory
    OS allows for a limited number of allocations - VkPhysicalDeviceLimits
    
    Device memory is organized into heaps with different memory types.
    A heap is a memory resource of a particular size
    A type is a set of memory properties that can be used with the given memory heap
    VkGetPhysicalDeviceMemoryProperties tells you what kind of memory is available on your GPU.
    Memory properties:
      VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT - Most efficient for device access
      VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT - Memory can be accessed directly by the host using mapping functions like VkMapMemory
      VK_MEMORY_PROPERTY_HOST_COHERENT_BIT - Do not need to flush or invalidate calls to make host rights visible to the device
                                             or the device rights to the host
      VK_MEMORY_PROPERTY_HOST_CACHED_BIT - The memory is cached on the host which means it will be slower to access
      VK_MEMORY_PROPERTY_LAZILY_ALLOCTED_BIT - Memory is only accessed by the device and is only allocated when actually needed
      
    Heap and Types:
      Type A - Local memory
      Type B - Local and visible
      Type C - Local, visible and coherent
      Type D - Cached
      
      Type A is available only in Heap 0
      Type B is available only in Heap 0
      Type C is available in heaps 1 and 2
      Type D is available in heaps 2 and 3
      
      Vulkan quarantee that one memory type is host visible and host coherent and, one memory type is device-local
      
    
    
